/*
using System.Collections;
using System.Collections.Generic;
using System.Reflection;
using System.Text;
using UnityEditor;
using UnityEditorInternal;
using UnityEngine;
using UnityEngine.Events;

[CustomPropertyDrawer(typeof(UnityEventBase), true)]
public class GlobalUnityEventDrawer : UnityEventDrawer
{
    GUIContent R_mixedValueContent => typeof(EditorGUI).GetProperty("mixedValueContent", BindingFlags.Static | BindingFlags.NonPublic).GetValue(null) as GUIContent;

    GUIContent R_Temp(string t)
    {
        return new GUIContent(t, null, string.Empty);
    }
    
    PersistentListenerMode R_GetMode(SerializedProperty mode)
    {
        return (PersistentListenerMode)typeof(UnityEventDrawer).GetMethod("GetMode", BindingFlags.Static | BindingFlags.NonPublic)
            .Invoke(null, new object[] { mode });
    }
    
    UnityEventBase R_m_DummyEvent => typeof(UnityEventDrawer).GetField("m_DummyEvent", BindingFlags.Instance | BindingFlags.NonPublic).GetValue(this) as UnityEventBase;

    GenericMenu R_BuildPopupList(UnityEngine.Object target,
        UnityEventBase dummyEvent,
        SerializedProperty listener)
    {
        return typeof(UnityEventDrawer).GetMethod("BuildPopupList", BindingFlags.Static | BindingFlags.NonPublic).Invoke(null, new object[]{target, dummyEvent, listener}) as GenericMenu;   
    }
    
    protected override void DrawEvent(Rect rect, int index, bool isActive, bool isFocused)
    {
        FieldInfo m_ListenersArrayFieldInfo =
            typeof(UnityEventDrawer).GetField("m_ListenersArray", BindingFlags.Instance | BindingFlags.NonPublic);
        if (m_ListenersArrayFieldInfo == null)
        {
            base.DrawEvent(rect, index, isActive, isFocused);
            return;
        }

        SerializedProperty m_ListenersArray = m_ListenersArrayFieldInfo.GetValue(this) as SerializedProperty;
        if (m_ListenersArray == null)
        {
            base.DrawEvent(rect, index, isActive, isFocused);
            return;
        }

        SerializedProperty arrayElementAtIndex = m_ListenersArray.GetArrayElementAtIndex(index);
        ++rect.y;

        MethodInfo getRawRectsMethodInfo =
            typeof(UnityEventDrawer).GetMethod("GetRowRects", BindingFlags.Instance | BindingFlags.NonPublic);
        if (getRawRectsMethodInfo == null)
        {
            base.DrawEvent(rect, index, isActive, isFocused);
            return;
        }

        Rect[] rowRects = getRawRectsMethodInfo.Invoke(this, new object[] { rect }) as Rect[];
        if (rowRects == null)
        {
            base.DrawEvent(rect, index, isActive, isFocused);
            return;
        }
        
        Rect position1 = rowRects[0];
        Rect position2 = rowRects[1];
        Rect rect1 = rowRects[2];
        Rect position3 = rowRects[3];
        SerializedProperty propertyRelative1 = arrayElementAtIndex.FindPropertyRelative("m_CallState");
        SerializedProperty propertyRelative2 = arrayElementAtIndex.FindPropertyRelative("m_Mode");
        SerializedProperty propertyRelative3 = arrayElementAtIndex.FindPropertyRelative("m_Arguments");
        SerializedProperty propertyRelative4 = arrayElementAtIndex.FindPropertyRelative("m_Target");
        SerializedProperty propertyRelative5 = arrayElementAtIndex.FindPropertyRelative("m_MethodName");

        // todo
        SerializedProperty propertyRelative6 = propertyRelative3.FindPropertyRelative("m_StringArgument");

        Color backgroundColor = GUI.backgroundColor;
        GUI.backgroundColor = Color.white;
        // runtime selector
        EditorGUI.PropertyField(position1, propertyRelative1, GUIContent.none);
        EditorGUI.BeginChangeCheck();
        GUI.Box(position2, GUIContent.none);
        // object refernce
        EditorGUI.PropertyField(position2, propertyRelative4, GUIContent.none);
        if (EditorGUI.EndChangeCheck())
            propertyRelative5.stringValue = (string)null;
        PersistentListenerMode persistentListenerMode = R_GetMode(propertyRelative2);
        if (propertyRelative4.objectReferenceValue == (UnityEngine.Object)null ||
            string.IsNullOrEmpty(propertyRelative5.stringValue))
            persistentListenerMode = PersistentListenerMode.Void;

        string stringValue = propertyRelative3.FindPropertyRelative("m_ObjectArgumentAssemblyTypeName").stringValue;
        System.Type type1 = typeof(UnityEngine.Object);
        if (!string.IsNullOrEmpty(stringValue))
        {
            System.Type type2 = System.Type.GetType(stringValue, false);
            if ((object)type2 == null)
                type2 = typeof(UnityEngine.Object);
            type1 = type2;
            
            Debug.Log(stringValue);

        }

        int num;
        switch (persistentListenerMode)
        {
            case PersistentListenerMode.Void:
                num = 0;
                break;
            case PersistentListenerMode.Object:
                EditorGUI.BeginChangeCheck();
                UnityEngine.Object @object = EditorGUI.ObjectField(position3, GUIContent.none,
                    propertyRelative6.objectReferenceValue, type1, true);
                if (EditorGUI.EndChangeCheck())
                {
                    propertyRelative6.objectReferenceValue = @object;
                    goto label_22;
                }
                else
                    goto label_22;
            default:
                num = persistentListenerMode != 0 ? 1 : 0;
                break;
        }

        if (num != 0)
        {
            // Field arguments
            EditorGUI.PropertyField(position3, propertyRelative6, GUIContent.none);
        }

        label_22:
        using (new EditorGUI.DisabledScope(propertyRelative4.objectReferenceValue == (UnityEngine.Object)null))
        {
            EditorGUI.BeginProperty(rect1, GUIContent.none, propertyRelative5);
            GUIContent content;
            if (EditorGUI.showMixedValue)
            {
                content = R_mixedValueContent;
            }
            else
            {
                StringBuilder stringBuilder = new StringBuilder();
                if (propertyRelative4.objectReferenceValue == (UnityEngine.Object)null ||
                    string.IsNullOrEmpty(propertyRelative5.stringValue))
                    stringBuilder.Append("No Function");
                else if (!UnityEventDrawer.IsPersistantListenerValid(R_m_DummyEvent, propertyRelative5.stringValue,
                             propertyRelative4.objectReferenceValue, R_GetMode(propertyRelative2),
                             type1))
                {
                    string str = "UnknownComponent";
                    UnityEngine.Object objectReferenceValue = propertyRelative4.objectReferenceValue;
                    if (objectReferenceValue != (UnityEngine.Object)null)
                        str = objectReferenceValue.GetType().Name;
                    stringBuilder.Append(string.Format("<Missing {0}.{1}>", (object)str,
                        (object)propertyRelative5.stringValue));
                }
                else
                {
                    stringBuilder.Append(propertyRelative4.objectReferenceValue.GetType().Name);
                    if (!string.IsNullOrEmpty(propertyRelative5.stringValue))
                    {
                        stringBuilder.Append(".");
                        if (propertyRelative5.stringValue.StartsWith("set_"))
                            stringBuilder.Append(propertyRelative5.stringValue.Substring(4));
                        else
                            stringBuilder.Append(propertyRelative5.stringValue);
                    }
                }

                content = R_Temp(stringBuilder.ToString());
            }

            if (EditorGUI.DropdownButton(rect1, content, FocusType.Passive, EditorStyles.popup))
                R_BuildPopupList(propertyRelative4.objectReferenceValue, R_m_DummyEvent, arrayElementAtIndex)
                    .DropDown(rect1);
            EditorGUI.EndProperty();
        }

        GUI.backgroundColor = backgroundColor;
    }

    static void RenderFuck()
    {
        // Retrieve potential options dynamically
        string[] options = stateObject.states;
        if (options != null && options.Length > 0)
        {
          int currentIndex = System.Array.IndexOf(options, propertyRelative6.stringValue);
          currentIndex = currentIndex < 0 ? 0 : currentIndex;

          Rect popupRect = new Rect(rect.x, rect.y + EditorGUIUtility.singleLineHeight, rect.width, EditorGUIUtility.singleLineHeight);

          EditorGUI.BeginChangeCheck();
          int selectedIndex = EditorGUI.Popup(popupRect, "Option", currentIndex, options);
          if (EditorGUI.EndChangeCheck())
          {
              propertyRelative6.stringValue = options[selectedIndex];
          }
        }
    }
}
*/